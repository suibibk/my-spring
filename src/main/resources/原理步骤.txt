手写Spring IOC/DI xml方式和注解方式的原理和步骤
原理：都是通过java的类路径反射机制来实例化类放入一个全局变量中。通过先实例化bean，后处理属性的依赖来解决属性循环依赖的问题。

一、配置文件方式
1、先将配置文件的bean信息读取出来到一个list中去。list中是实例化bean的id，类路径，属性集合。
2、循环处理第一步获取的list，根据java的反射机制调用类默认的构造方法实例化类，将实例化后的类存放在一个全局
map中，key是id,值是对象
3、循环第一步的list，处理属性依赖，因为实例都已经初始化了，所以不会有循环依赖锁死的问题。

二、注解方式
1、先定义两个注解，一个是Bean，一个是Source,Bean的作用是表明这个类会在容器启动的时候实例化，Source的作用是
表明这个属性会在容器启动阶段初始化。
2、根据用户传过来的包名，通过遍历的方式去获取包及子包下面的所有类对象
3、遍历第二步获取的类对象，判断类上是否有@Bean注解，若是有则加入到一个集合中去
4、遍历第3步获取的集合，根据反射技术去实例化类，放入一个全局对象map中。key为类名称首字母小写。
5、遍历map，处理对象的属性依赖，通过获取类的字节码以及通过类的字节码获取类的所有属性值
6、遍历属性，判断属性上是否有@Source注解，有的话，就根据属性名去map中获取属性对应的实例。
7、设置属性的修改权限为true,这样的话就算是private都可以设置。
8、调用Field设置属性的值。

三、注意事项
1、本质上都是通过配置文件，和注解+反射来初始化bean，不需要通过用户自己new
2、这里初始化的全部都是单例模式。内存中只会有一份，并且多例模式的循环依赖不好解决
3、获取属性的时候必须用Field[] fields = clazz.getDeclaredFields();这个，若是用Field field = clazz.getField(id);
会获取不到private.
4、全局map建议使用线程安全的ConcurrentHashMap<String, Object> map 来。

总结：学习任何技术都不要去死记代码，不出两个月绝对会忘记，我们只需要知道原理，那么我们便可以根据原理来实现出来。框架的原理也许都
差不多，只不过它的代码重构以及加上了很多设计模式，使得代码更加的通用。


